name: Continuous Deployment Project

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

permissions:
  contents: write
  id-token: write  # AsegÃºrate de incluir esto para usar el token de identidad en pasos posteriores

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'corretto'
      - name: Build with Maven
        run: mvn clean install package
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Log in to ECR
        uses: aws-actions/amazon-ecr-login@v1
        with:
          region: ${{ secrets.AWS_REGION }}
      - name: Build Docker image
        run: |
          docker build -t api-utec-customer-microservice:latest .
      - name: Tag Docker image
        run: |
          docker tag api-utec-customer-microservice:latest 654654431014.dkr.ecr.us-east-1.amazonaws.com/api-utec-customer-microservice:latest
      - name: Push Docker image to ECR
        run: |
          docker push 654654431014.dkr.ecr.us-east-1.amazonaws.com/api-utec-customer-microservice:latest
      - name: Update kube config
        run: aws eks update-kubeconfig --name ${{ secrets.EKS_CLUSTER_NAME }} --region ${{ secrets.AWS_REGION }}
      - name: Configure kubectl
        run: |
          echo "${{ secrets.KUBECONFIG }}" | base64 -d > $HOME/.kube/config

      - name: Deploy to EKS
        run: |
          kubectl apply -f deploy/k8s/microservice-deployment.yaml

      - name: Install Argo CD CLI
        run: |
          curl -sSL -o argocd https://github.com/argoproj/argo-cd/releases/download/v2.6.4/argocd-linux-amd64
          chmod +x argocd
          sudo mv argocd /usr/local/bin/argocd
      - name: Update Argo CD application
        run: |
          argocd login ${{ secrets.ARGOCD_SERVER }} --username ${{ secrets.ARGOCD_USERNAME }} --password ${{ secrets.ARGOCD_PASSWORD }} --insecure
          argocd app sync api-utec-customer-microservice --async
          argocd app wait api-utec-customer-microservice
        env:
          ARGOCD_SERVER: ${{ secrets.ARGOCD_SERVER }}
          ARGOCD_USERNAME: ${{ secrets.ARGOCD_USERNAME }}
          ARGOCD_PASSWORD: ${{ secrets.ARGOCD_PASSWORD }}
          KUBECONFIG: ${{ secrets.KUBECONFIG }}